# this is a jinja tamplated YAML file, for building the language extension
name: MyST Markdown
scopeName: text.myst.injection
injectionSelector: L:(text.html.markdown -markup.fenced_code.block -markup.inserted.math -markup.directive.code -markup.directive.unknown)
patterns:
  - { include: "#line_comment" }
  - { include: "#block_break" }
  - { include: "#target_block" }
  - { include: "#role_span" }
  - { include: "#div-directive-block-start" }
  - { include: "#directive-admonitions" }
  - { include: "#directive-math" }
  - { include: "#directive-code" }
  - { include: "#directive-default" }

repository:
  line_comment:
    match: '(^|\G)[ ]{0,3}\%\s*(.*)'
    name: comment.line.percentage.myst

  block_break:
    match: '(?:^|\G)[ ]{0,3}(\+\+\++)\s*(.*)\s*'
    captures:
      "1": { name: keyword.other.block_break.myst }
      "2":
        name: markup.attributes.block_break.myst
        patterns:
          - begin: \{
            end: \}
            name: meta.embedded.json
            patterns:
              - {include: source.json}


  target_block:
    match: '(?:^|\G)[ ]{0,3}\((.+?)\)(\=)'
    captures:
      "1": { name: support.variable.target.myst }
      "2": { name: punctuation.target.myst }

  role_span:
    match: '(?<!\\)(?:\\\\)*{([\:\-\_0-9a-zA-A]*)}(`+)(?!`)(.+?)(?<!`)\2(?!`)'
    captures:
      "1": { name: support.function.role.myst }
      "3": { name: markup.inline.raw.string.role.myst }

  div-directive-block-start:
    match: '(?:^|\G)[ ]{0,3}(:{3,})\{([\:\-\_0-9a-zA-A]*)\}(.*)'
    captures:
      "2": { name: support.class.directive.myst }
      "3": { name: markup.inline.raw.string.attribute.myst }

  directive-admonitions:
    comment: These are directive blocks, whereby the content, should be treated as markdown
    begin: (^|\G)(\s*)(`{3,}|~{3,})\{({{ admonition_classes|join('|') }})\}\s*(?=([^`~]*)?$)
    beginCaptures:
      "3": { name: punctuation.definition.myst }
      "4": { name: support.class.directive.myst }
      "5": { name: markup.inline.raw.string.attribute.myst }
    end: (^|\G)(\2|\s{0,3})(\3)\s*$
    endCaptures:
      "3": { name: punctuation.definition.myst }
    patterns:
      - begin: (^|\G)(\s*)(.*)
        while: (^|\G)(?!\s*([\`~]{3,})\s*$)
        contentName: meta.embedded.block.markdown
        patterns:
          - { include: text.html.markdown }
    name: markup.directive.admonition.myst

  directive-math:
    begin: (^|\G)(\s*)(`{3,}|~{3,})\{(math)\}\s*(?=([^`~]*)?$)
    name: markup.directive.math.myst
    end: (^|\G)(\2|\s{0,3})(\3)\s*$
    beginCaptures:
      '3': {name: 'punctuation.definition.myst'}
      '4': {name: 'support.class.directive.myst'}
      '5': {name: 'support.variable.language.myst'}
    endCaptures:
      '3': {name: 'punctuation.definition.myst'}
    patterns:
      - begin: (^|\G)(\s*)(.*)
        while: (^|\G)(?!\s*([\`~]{3,})\s*$)
        contentName: meta.embedded.block.latex
        patterns:
          - begin: (^|\G)(-{3})\s*$
            beginCaptures:
              '1': {name: 'punctuation.options.myst'}
            end: (^|\G)(-{3})\s*$
            endCaptures:
              '2': {name: 'punctuation.options.myst'}
            contentName: meta.embedded.block.options
            patterns:
              - {include: source.yaml}
          - {include: text.html.markdown.math#math}

  directive-code:
    comment: These are directive blocks containing code
    patterns:
      {%- for language in languages %}
      - {include: '#directive-code-{{ language.name }}'}
      {% endfor %}

  {% for language in languages %}
  directive-code-{{ language.name }}:
    begin: (^|\G)(\s*)(\`{3,}|~{3,})\s*\{({{ code_classes|join('|') }})\}\s*(?i:({{ language.identifiers|join('|') }})((\s+|:|\{)[^\`~]*)?$)
    name: markup.directive.code.myst
    end: (^|\G)(\2|\s{0,3})(\3)\s*$
    beginCaptures:
      '3': {name: 'punctuation.definition.myst'}
      '4': {name: 'support.class.directive.myst'}
      '5': {name: 'support.variable.language.myst'}
      # '6': {name: 'markup.inline.raw.string.attributes.myst'}
    endCaptures:
      '3': {name: 'punctuation.definition.myst'}
    patterns:
      - begin: (^|\G)(\s*)(.*)
        while: (^|\G)(?!\s*([\`~]{3,})\s*$)
        contentName: meta.embedded.block.{{ language.language }} {{ language.alias_name }}
        patterns:

          # an optional initial YAML block
          # TODO currently this can start anywhere in the directive content,
          # therefore, for now, we restrict it to only languages that it would not affect
          {% if language.allow_yaml %}
          - begin: (^|\G)(-{3})\s*$
            beginCaptures:
              '1': {name: 'punctuation.options.myst'}
            end: (^|\G)(-{3})\s*$
            endCaptures:
              '2': {name: 'punctuation.options.myst'}
            contentName: meta.embedded.block.options
            patterns:
              - {include: source.yaml}
          {% endif %}

          {%- for source in language.sources %}
          - {include: {{ source }}}
          {% endfor %}
  {% endfor %}

  directive-default:
    begin: (^|\G)(\s*)(\`{3,}|~{3,})\s*\{([\:\-\_0-9a-zA-A]+)\}\s*(?=([^`~]*)?$)
    name: markup.directive.unknown.myst
    end: (^|\G)(\2|\s{0,3})(\3)\s*$
    beginCaptures:
      '3': {name: 'punctuation.definition.myst'}
      '4': {name: 'support.class.directive.myst'}
      '5': {name: 'markup.inline.raw.string.attribute.myst'}
    endCaptures:
      '3': {name: 'punctuation.definition.myst'}
    contentName: markup.raw.content.myst
